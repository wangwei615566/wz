package com.rongdu.cashloan.core.common.util;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.net.HttpURLConnection;import java.net.MalformedURLException;import java.net.URL;import java.util.ArrayList;import java.util.List;import java.util.Map;import org.apache.commons.lang.StringUtils;import org.apache.http.HttpEntity;import org.apache.http.HttpResponse;import org.apache.http.NameValuePair;import org.apache.http.client.config.RequestConfig;import org.apache.http.client.entity.UrlEncodedFormEntity;import org.apache.http.client.methods.HttpGet;import org.apache.http.client.methods.HttpPost;import org.apache.http.conn.HttpClientConnectionManager;import org.apache.http.entity.StringEntity;import org.apache.http.impl.client.CloseableHttpClient;import org.apache.http.impl.client.HttpClients;import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;import org.apache.http.message.BasicNameValuePair;import org.apache.http.protocol.HTTP;import org.apache.http.util.EntityUtils;import org.slf4j.Logger;import org.slf4j.LoggerFactory;public class HttpClient {    private static final Logger logger = LoggerFactory            .getLogger(HttpClient.class);    private static CloseableHttpClient client;    // 连接超时时间，默认10秒    private static int socketTimeout = 10000;    // 传输超时时间，默认30秒    private static int connectTimeout = 30000;    // 请求器的配置    private static RequestConfig requestConfig;    static {        HttpClientConnectionManager poolingConnManager = new PoolingHttpClientConnectionManager();        client = HttpClients.custom().setConnectionManager(poolingConnManager)                .build();        // 根据默认超时限制初始化requestConfig        requestConfig = RequestConfig.custom().setSocketTimeout(socketTimeout)                .setConnectTimeout(connectTimeout).build();    }    public static String get(String url, boolean fastMode) {        return get(url, fastMode, false);    }    public static String get(String url, boolean fastMode,            boolean forceTimeout) {        HttpGet method = myHttpGet(url);        String result = null;        try {            // setMethodTimeout(method, fastMode, forceTimeout);            HttpResponse response = client.execute(method);            HttpEntity entity = response.getEntity();            result = EntityUtils.toString(entity, "UTF-8");            logger.info("push response result:{}", result);        } catch (Exception e) {            logger.error("push fail: url=" + url, e);        } finally {            method.releaseConnection();        }        return result;    }    public static String post(String url, String body, boolean fastMode) {        HttpPost method = myHttpPost(url);        // method.setFollowRedirects(true);        String result = null;        try {            // setMethodTimeout(method, fastMode);            method.addHeader("Content-Type", "text/xml");            method.setEntity(new StringEntity(body, "UTF-8"));            HttpResponse response = client.execute(method);            HttpEntity entity = response.getEntity();            result = EntityUtils.toString(entity, "UTF-8");            logger.info("push response result:{}", result);        } catch (Exception e) {            logger.error("push fail: url=" + url + ", body=" + body, e);        } finally {            method.releaseConnection();        }        return result;    }    public static InputStream postMedia(String urls, String body) {        InputStream inputStream = null;        // HttpURLConnection httpURLConnection = null;        // HttpGet method = myHttpGet(url);        // method.setFollowRedirects(true);        // String result = null;        try {            URL url = new URL(urls);            HttpURLConnection conn = (HttpURLConnection) url.openConnection();            conn.setDoInput(true);            conn.setRequestMethod("GET");            // 根据内容类型获取扩展名            // String fileExt =            // WeixinUtil.getFileEndWitsh(conn.getHeaderField("Content-Type"));            // 将mediaId作为文件名            // BufferedInputStream bis = new BufferedInputStream(            //        conn.getInputStream());            conn.disconnect();            String info = String.format("下载媒体文件成功，filePath=");            logger.info(info);        } catch (MalformedURLException e) {            logger.error("Exception_MalformedURL", e);        } catch (IOException e) {            logger.error("Exception_IOException", e);        }        return inputStream;    }    public static String getFromInputStream(String url, boolean fastMode) {        HttpGet method = myHttpGet(url);        // method.setFollowRedirects(true);        String result = null;        try {            // setMethodTimeout(method, fastMode);            HttpResponse response = client.execute(method);            HttpEntity entity = response.getEntity();            result = EntityUtils.toString(entity, "UTF-8");        } catch (Exception e) {            logger.error("push fail: url=" + url, e);        } finally {            method.releaseConnection();        }        return result;    }    public static String postForm(String url, String body, boolean fastMode) {        HttpPost method = myHttpPost(url);        // method.setFollowRedirects(true);        String result = null;        try {            method.addHeader("Content-Type",                    "application/x-www-form-urlencoded");            method.setEntity(new StringEntity(body, "UTF-8"));            // setMethodTimeout(method, fastMode);            HttpResponse response = client.execute(method);            HttpEntity entity = response.getEntity();            InputStream in = entity.getContent();            try {                InputStreamReader isr = new InputStreamReader(in, "UTF-8");                BufferedReader buffRead = new BufferedReader(isr);                StringBuffer inputLine = new StringBuffer();                String temp = null;                while ((temp = buffRead.readLine()) != null) {                    inputLine.append(temp);                }                logger.info("push response result:{}", result);                result = inputLine.toString();            } catch (Exception e) {                throw e;            } finally {                if (in != null) {                    in.close();                }            }        } catch (Exception e) {            logger.error("push fail: url=" + url + ", body=" + body, e);        } finally {            method.releaseConnection();        }        return null;    }    public static String postJson(String url, String body, boolean fastMode) {    	logger.debug("-------------===========------------{}, {}", url, body);    	HttpPost method = myHttpPost(url);        // method.setFollowRedirects(true);        String result = null;        try {            method.addHeader("Content-Type", "application/json");            method.setEntity(new StringEntity(body, "UTF-8"));            //////////////// start for test////////////////             method.addHeader("m", "22706936D75E5CD3CFA63A48727022CD-5Z");//             method.addHeader("dtp", "iOS");//             method.addHeader("dtn", "359881064535636");            //////////////// end for test////////////////            HttpResponse response = client.execute(method);            HttpEntity entity = response.getEntity();            InputStream in = entity.getContent();            try {                InputStreamReader isr = new InputStreamReader(in, "UTF-8");                BufferedReader buffRead = new BufferedReader(isr);                StringBuffer inputLine = new StringBuffer();                String temp = null;                while ((temp = buffRead.readLine()) != null) {                    inputLine.append(temp);                }                logger.info("push response result:{}", result);                result = inputLine.toString();            } catch (Exception e) {                throw e;            } finally {                if (in != null) {                    in.close();                }            }        } catch (Exception e) {            logger.error("push fail: url=" + url + ", body=" + body, e);        } finally {            method.releaseConnection();        }        return result;    }    @SuppressWarnings("deprecation")    public static String postForm(String url, Map<String, String> params,            boolean fastMode) {        HttpPost method = myHttpPost(url);        String result = null;        try {            List<NameValuePair> paramList = new ArrayList<>();            if (params != null) {                for (Map.Entry<String, String> entry : params.entrySet()) {                    paramList.add(new BasicNameValuePair(entry.getKey(),                            entry.getValue()));                }                method.setEntity(                        new UrlEncodedFormEntity(paramList, HTTP.UTF_8));            }            HttpResponse response = client.execute(method);            HttpEntity entity = response.getEntity();            result = EntityUtils.toString(entity, "UTF-8");            logger.info("push response result:{}", result);        } catch (Exception e) {            logger.error(                    "push fail: url=" + url + ", params =" + params.toString(),                    e);        } finally {            method.releaseConnection();        }        return result;    }    /**     * maixun-post专用     *      * @param url     * @param params     * @param fastMode     * @return     */    @SuppressWarnings("deprecation")    public static String postSmsMaixun(String url, Map<String, String> params,            boolean fastMode) {        HttpPost method = myHttpPost(url);        String result = null;        try {            method.addHeader("Connection", "close");            List<NameValuePair> paramList = new ArrayList<>();            if (params != null) {                for (Map.Entry<String, String> entry : params.entrySet()) {                    paramList.add(new BasicNameValuePair(entry.getKey(),                            entry.getValue()));                }                method.setEntity(                        new UrlEncodedFormEntity(paramList, HTTP.UTF_8));            }            HttpResponse response = client.execute(method);            HttpEntity entity = response.getEntity();            result = EntityUtils.toString(entity, "UTF-8");            result = StringUtils.replace(result, "GBK", "utf-8");            logger.info("push response result:{}", result);        } catch (Exception e) {            logger.error("HTTPException_POST_MAIXUN_SMS: url=" + url                    + ", params =" + params.toString(), e);        } finally {            method.releaseConnection();        }        return result;    }    /**     * 设置连接超时时间     *     * @param socketTimeout     *            连接时长，默认10秒     */    public static void setMethodTimeout(int socketTimeout) {        HttpClient.socketTimeout = socketTimeout;        resetRequestConfig();    }    /**     * 设置传输超时时间     *     * @param connectTimeout     *            传输时长，默认30秒     */    public static void setConnectTimeout(int connectTimeout) {        HttpClient.connectTimeout = connectTimeout;        resetRequestConfig();    }    private static void resetRequestConfig() {        requestConfig = RequestConfig.custom().setSocketTimeout(socketTimeout)                .setConnectTimeout(connectTimeout).build();    }    private static HttpGet myHttpGet(String url) {        HttpGet get = new HttpGet(url);        // 设置请求器的配置        get.setConfig(requestConfig);        return get;    }    private static HttpPost myHttpPost(String url) {        HttpPost post = new HttpPost(url);        // 设置请求器的配置        post.setConfig(requestConfig);        return post;    }}